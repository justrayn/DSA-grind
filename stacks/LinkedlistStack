#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

typedef struct Node{
    int Data;
    struct Node*next;
}*topL, NodeType;

void initStack(topL*);
bool isEmpty(topL);
void push(topL*, int);
void pop(topL*);
int peek(topL);
void visualize(topL);
void removeD(topL*, int);
void SortStack(topL*);
int main(){
    topL stack;
    initStack(&stack);
    push(&stack, 7);
    push(&stack, 21);
    push(&stack, 10);
    visualize(stack);
    removeD(&stack, 21);
    printf("after removing\n");
    visualize(stack);



    return 0;
}


void initStack(topL*s){
    *s = NULL;
}
bool isEmpty(topL s){
    return s == NULL;
}
void push(topL*s, int elem){
    topL newD = malloc(sizeof(NodeType));
    if(newD == NULL){
        return;
    }
    newD->Data = elem;
    newD->next  = *s;
    *s = newD;
}
void pop(topL*s){
    topL temp = *s;
    if(!isEmpty(*s)){
        *s = temp->next;
        free(temp);
    }

}
void visualize(topL s){
    printf("Front -> ");
    while(!isEmpty(s)){
        printf("%d -> ", s->Data);
        s = s->next;
    }

    printf("rear\n");
}

int peek(topL s){
    return s->Data;
}
void removeD(topL*s, int elem){
    topL temp;
    initStack(&temp);
    while(!isEmpty(*s)){
        int top = peek(*s);
        pop(s);
        if(top != elem){
            push(&temp, top);
        }
    }

     while(!isEmpty(temp)){
        int val = peek(temp);
        pop(&temp);
        push(s, val);
        
    }
}
void SortStack(topL*);