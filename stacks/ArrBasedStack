#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#define MAX 5

typedef int Data;
typedef struct {
    Data elem[MAX];
    int top;
}Stack;

void initStack(Stack *);
bool isEmpty(Stack);
bool isFull(Stack);
Data peek(Stack);
void push(Stack *, Data);
void pop(Stack*);
void visualize(Stack);
void removeNeg(Stack *s, Stack *r);

int main(){
    Stack r, s;
    initStack(&r);
    initStack(&s);
    push(&s, -10);
    push(&s, 10);
    push(&s, 2);
    push(&s, -20);
    push(&s, 1);
    printf("before remobing anything\n");
    visualize(s);
    removeNeg(&s, &r);
    printf("afte remobing something\n");
    pop(&s);
    
    visualize(s);
}

void initStack(Stack *s){
    s->top = -1;
}

bool isEmpty(Stack s){
    return s.top == -1;
}

bool isFull(Stack s){
    return s.top == MAX -1;
}

Data peek(Stack s){
    return s.elem[s.top];
}

void push(Stack *s, Data elem){
    if(isFull(*s)){
        printf("The stack...\nTHE STACKK IS FULL!!!!");
        return;
    }
    s->elem[++s->top] = elem;
}

void pop(Stack*s){
    if(isEmpty(*s)){
        printf("The stack...\nTHE STACKK IS EMPTY!!!!");
        return;
    }
    (s->top)--;
}

void visualize(Stack s){
    for(int i = MAX -1; i >= 0; i--){
        if(i > s.top){
            printf("???\n");
        }

        if(i == s.top){
            printf("%d -> top\n", s.elem[s.top]);
        }

        if(i < s.top){
            printf("x\n");
        }
    }
}

void removeNeg(Stack *s, Stack *r){
    Stack temp;
    initStack(&temp);
    while(!isEmpty(*s)){
        Data top = peek(*s);
        pop(s);
        if(top >= 0){
            push(&temp, top);
        } else {
            push(r, top);
        }
    }

    while(!isEmpty(temp)){
        Data top = peek(temp);
        pop(&temp);
        push(s, top);
    }
}